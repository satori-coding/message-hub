// <auto-generated />
using System;
using MessageHub;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessageHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250821143329_AddMultiTenantSupport")]
    partial class AddMultiTenantSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("MessageHub.Channels.Shared.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelData")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryReceiptText")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MessageParts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NetworkErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MessageHub.Channels.Shared.MessagePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryReceiptText")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NetworkErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderMessageId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalParts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderMessageId");

                    b.HasIndex("MessageId", "PartNumber");

                    b.ToTable("MessageParts");
                });

            modelBuilder.Entity("MessageHub.DomainModels.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriptionKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionKey")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("MessageHub.DomainModels.TenantChannelConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ChannelName")
                        .IsUnique();

                    b.ToTable("TenantChannelConfiguration");

                    b.HasDiscriminator<string>("ConfigurationType").HasValue("TenantChannelConfiguration");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MessageHub.DomainModels.TenantHttpConfiguration", b =>
                {
                    b.HasBaseType("MessageHub.DomainModels.TenantChannelConfiguration");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthPassword")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthUsername")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FromNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("RequestTimeout")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebhookUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("HTTP");
                });

            modelBuilder.Entity("MessageHub.DomainModels.TenantSmppConfiguration", b =>
                {
                    b.HasBaseType("MessageHub.DomainModels.TenantChannelConfiguration");

                    b.Property<TimeSpan>("ApiTimeout")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("BindTimeout")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ConnectionTimeout")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryReceiptTimeoutMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExpectDeliveryReceipts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("KeepAliveInterval")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxConnections")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("SubmitTimeout")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeoutStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SMPP");
                });

            modelBuilder.Entity("MessageHub.Channels.Shared.Message", b =>
                {
                    b.HasOne("MessageHub.DomainModels.Tenant", null)
                        .WithMany("Messages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MessageHub.Channels.Shared.MessagePart", b =>
                {
                    b.HasOne("MessageHub.Channels.Shared.Message", "Message")
                        .WithMany("Parts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("MessageHub.DomainModels.TenantChannelConfiguration", b =>
                {
                    b.HasOne("MessageHub.DomainModels.Tenant", "Tenant")
                        .WithMany("ChannelConfigurations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MessageHub.Channels.Shared.Message", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("MessageHub.DomainModels.Tenant", b =>
                {
                    b.Navigation("ChannelConfigurations");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
