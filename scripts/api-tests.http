# MessageHub SMS API Tests
# Installiere die "REST Client" Extension in VS Code
# Dann kannst du auf "Send Request" √ºber jeder ### Zeile klicken

### Variablen f√ºr lokale Entwicklung
@baseUrl = https://localhost:7142/api/message
@baseUrlHttp = http://localhost:5289/api/message

### 1. SMS senden (POST)
POST {{baseUrl}}/send
Content-Type: application/json

{
  "PhoneNumber": "+49123456789",
  "Content": "Hallo! Dies ist eine Test-SMS von der API.",
  "ChannelType": 0
}

### 2. SMS senden mit l√§ngerer Nachricht
POST {{baseUrl}}/send
Content-Type: application/json

{
  "PhoneNumber": "+49987654321", 
  "Content": "Dies ist eine l√§ngere Test-Nachricht um zu pr√ºfen, ob l√§ngere SMS-Inhalte korrekt verarbeitet werden. Die Nachricht sollte erfolgreich gespeichert und versendet werden.",
  "ChannelType": 1
}

### 3. SMS senden - Fehlerfall (leere Telefonnummer)
POST {{baseUrl}}/send
Content-Type: application/json

{
  "PhoneNumber": "",
  "Content": "Test Nachricht",
  "ChannelType": 0
}

### 4. SMS senden - Fehlerfall (zu lange Nachricht)
POST {{baseUrl}}/send
Content-Type: application/json

{
  "PhoneNumber": "+49123456789",
  "Content": "Diese Nachricht ist viel zu lang und sollte einen Fehler verursachen, da sie √ºber 1000 Zeichen hat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.",
  "ChannelType": 0
}

### 5. Alle SMS Nachrichten abrufen (GET)
GET {{baseUrl}}
Accept: application/json

### 6. Spezifische SMS Status abrufen (GET) - ID 1
GET {{baseUrl}}/1/status
Accept: application/json

### 7. Spezifische SMS Status abrufen (GET) - ID 2  
GET {{baseUrl}}/2/status
Accept: application/json

### 8. SMS Status abrufen - nicht existierende ID
GET {{baseUrl}}/999/status
Accept: application/json

### 9. Health Check - Swagger UI
GET {{baseUrl}}/../../swagger
Accept: text/html

### Alternative HTTP (ohne HTTPS) f√ºr lokale Tests

### SMS senden via HTTP
POST {{baseUrlHttp}}/send
Content-Type: application/json

{
  "PhoneNumber": "+49111222333",
  "Content": "Test SMS √ºber HTTP",
  "ChannelType": 1
}

### Alle SMS via HTTP abrufen
GET {{baseUrlHttp}}
Accept: application/json

###########################################
### MULTI-TENANT API TESTS 
### (Verwende appsettings.DevelopmentMultiTenant.json)
###########################################

### Multi-Tenant Variablen
@tenantAKey = dev-tenant-a-12345
@tenantBKey = dev-tenant-b-67890
@tenantCKey = dev-tenant-c-http-99999
@invalidKey = invalid-subscription-key-test

### üè¢ Tenant A Tests (SMPP + HTTP Fallback)

### Tenant A - SMPP Channel senden
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantAKey}}

{
  "PhoneNumber": "+49555111222",
  "Content": "Hallo von Tenant A √ºber SMPP!",
  "ChannelName": "localhost-smpp"
}

### Tenant A - HTTP Fallback Channel senden
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantAKey}}

{
  "PhoneNumber": "+49555111333",
  "Content": "Hallo von Tenant A √ºber HTTP Fallback!",
  "ChannelName": "httpbin-fallback"
}

### Tenant A - Default Channel (sollte SMPP sein)
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantAKey}}

{
  "PhoneNumber": "+49555111444",
  "Content": "Tenant A mit default channel",
  "ChannelType": 0
}

### Tenant A - Nachrichten abrufen (sollte nur eigene sehen)
GET {{baseUrl}}
Accept: application/json
X-Subscription-Key: {{tenantAKey}}

### Tenant A - Spezifische Nachricht abrufen
GET {{baseUrl}}/1/status
Accept: application/json
X-Subscription-Key: {{tenantAKey}}

### üè¢ Tenant B Tests (Nur SMPP)

### Tenant B - SMPP Channel senden
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantBKey}}

{
  "PhoneNumber": "+49666222333",
  "Content": "Hallo von Tenant B √ºber SMPP!",
  "ChannelName": "localhost-smpp-alt"
}

### Tenant B - Nachrichten abrufen (sollte nur eigene sehen)
GET {{baseUrl}}
Accept: application/json
X-Subscription-Key: {{tenantBKey}}

### Tenant B - Versucht Tenant A Nachricht abzurufen (sollte fehlschlagen)
GET {{baseUrl}}/1/status
Accept: application/json
X-Subscription-Key: {{tenantBKey}}

### üè¢ Tenant C Tests (Nur HTTP Channels)

### Tenant C - Primary HTTP Channel
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantCKey}}

{
  "PhoneNumber": "+49777333444",
  "Content": "Tenant C √ºber HTTP Primary Channel!",
  "ChannelName": "httpbin-primary"
}

### Tenant C - Backup HTTP Channel
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantCKey}}

{
  "PhoneNumber": "+49777333555",
  "Content": "Tenant C √ºber HTTP Backup Channel!",
  "ChannelName": "postman-echo-backup"
}

### Tenant C - Default Channel (sollte HTTP sein)
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantCKey}}

{
  "PhoneNumber": "+49777333666",
  "Content": "Tenant C mit default HTTP channel",
  "ChannelType": 1
}

### üö´ Security & Error Tests

### Fehlschlag - Kein Subscription Key (Multi-Tenant Mode)
POST {{baseUrl}}/send
Content-Type: application/json

{
  "PhoneNumber": "+49888444555",
  "Content": "Diese Nachricht sollte fehlschlagen",
  "ChannelType": 0
}

### Fehlschlag - Ung√ºltiger Subscription Key
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{invalidKey}}

{
  "PhoneNumber": "+49888444666",
  "Content": "Diese Nachricht sollte auch fehlschlagen",
  "ChannelType": 0
}

### Fehlschlag - Tenant versucht nicht existierenden Channel
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantAKey}}

{
  "PhoneNumber": "+49888444777",
  "Content": "Ung√ºltiger Channel Test",
  "ChannelName": "non-existent-channel"
}

### Tenant Isolation Test - Tenant A versucht alle Nachrichten zu sehen
GET {{baseUrl}}
Accept: application/json
X-Subscription-Key: {{tenantAKey}}

### üîß Channel Health Tests

### Test verschiedener Channel-Kombinationen pro Tenant
POST {{baseUrl}}/send
Content-Type: application/json
X-Subscription-Key: {{tenantAKey}}

{
  "PhoneNumber": "+49999111222",
  "Content": "Multi-Part Test: Dies ist eine l√§ngere Test-Nachricht um zu pr√ºfen ob Multi-Part SMS korrekt √ºber tenant-spezifische SMPP Kan√§le verarbeitet werden. Jeder Tenant sollte seine eigenen Connection Pools haben und die Nachrichten sollten isoliert verarbeitet werden. Das ist ein Test der Tenant-Isolation und Multi-Part SMS Funktionalit√§t.",
  "ChannelName": "localhost-smpp"
}